import crypto from 'crypto';

// createHash() - to hash passwords so you don't directly store passwords in databases
// Initialize the hash
const hash = crypto.createHash('sha256');
// String input of value you want to hash
hash.update('password1234');
// .digest to initialize the hash
console.log(hash.digest('hex'));

//randomBytes() - to generate random cryptographically strong data
crypto.randomBytes(16, (err, buf) => {
    if (err) throw err;
    console.log(buf.toString('hex'));
});

//createCipheriv() & createDecipheriv()
//Three inputs needed: algorithm, key, and IV
//Algorithms can be grabbed from the documentation and are string-type value dependent on OpenSSL
const algorithm = 'aes-256-cbc';
// Key and IV can be cryptographically random. Generated by .randomBytes method
const key = crypto.randomBytes(32);
const iv = crypto.randomBytes(16);
// To create the cipher
const cipher = crypto.createCipheriv(algorithm, key, iv);
// Update the const with the value that you want to encrypt
let encrypted = cipher.update('Hello, this is a secret message', 'utf8', 'hex');
encrypted += cipher.final('hex');
console.log(encrypted);

//To decrypt it, we do the same process but use createDecipheriv()
const decipher = crypto.createDecipheriv(algorithm, key, iv);
// First value is the encrypted hex cipher update
let decrypted = decipher.update(encrypted, 'utf8', 'hex');
// Final output is a text file (utf8)
decrypted += decipher.final('utf8');
console.log(decrypted);